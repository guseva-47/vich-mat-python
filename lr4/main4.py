import numpy as np
from math import sqrt
from gauss import gauss

# –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç: 
# –∞) –Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–≤–∞ –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –ø–æ –º–æ–¥—É–ª—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–ª–∞ –º–∞—Ç—Ä–∏—Ü—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–∞; 
# –±) –º–µ—Ç–æ–¥–æ–º –æ–±—Ä–∞—Ç–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π –Ω–∞–π—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –±–ª–∏–∂–∞–π—à–µ–µ –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É ùúÜ0. 
# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –º–∞—Ç—Ä–∏—Ü–∞, —Ç–æ—á–Ω–æ—Å—Ç—å, —á–∏—Å–ª–æ ùúÜ0 –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–Ω—ã —á–∏—Ç–∞—Ç—å—Å—è –∏–∑ —Ñ–∞–π–ª–∞,
# –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ–º–µ—â–∞—Ç—å—Å—è –≤ —Ñ–∞–π–ª. –ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—ã–≤–æ–¥ —á–∏—Å–ª–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.
ITER_MAX_COUNT = 1000

def inp_data(filename) :
    with open(filename, 'r') as file :
        # —á—Ç–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã, —Å–∏–º–≤–æ–ª—ã –æ—Ç–¥–µ–ª–µ–Ω—ã —Ç–∞–±—É–ª—è—Ü–∏—è–º–∏, –ø–æ—Å–ª–µ –º–∞—Ç—Ä–∏—Ü—ã –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        matrix = []
        for line in file :
            if line == '' or line == '\n' : break

            tmp = [float(n) for n in line.split('\t')]
            matrix.append(tmp)
        
        # —á—Ç–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏, –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –æ—Ç–¥–µ–ª–µ–Ω–Ω–∞—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –æ—Ç –º–∞—Ç—Ä–∏—Ü—ã
        line = file.readline()
        e = float(line)

        # —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ -- —á–∏—Å–ª–æ ùúÜ0 (–±–µ–∑ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏)
        line = file.readline()
        l0 = float(line)

        # —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ -- –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä, —Å–∏–º–≤–æ–ª—ã –æ—Ç–¥–µ–ª–µ–Ω—ã —Ç–∞–±—É–ª—è—Ü–∏–µ–π
        line = file.readline()
        v0 = [float(n) for n in line.split('\t')]

        return matrix, e, l0, v0
    return None, None, None, None


def norm_vector(x) :
    return sqrt(np.dot(x, x))

def residual(A, l, x):
    return A@x - l*x

# —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ª—è–º–±–¥–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
def find_l_multi(x, A, e, *, l0 = None, g1 = None, e1 = None) :
    new_x = None
    old_x = np.copy(x)
    go = True
    time_to_time_period = 1

    #
    if e1 is not None and g1 is not None :
        old_x -= (np.dot(old_x, g1) / np.dot(e1, g1)) * e1

    # –ø–µ—Ä–≤—ã–π —à–∞–≥
    if l0 == None :
        new_x = A @ old_x
    else :
        A = A - l0 * np.identity(len(A))
        new_x = gauss(A, old_x)
        
    new_l = np.dot(new_x, old_x) / np.dot(old_x, old_x)

    count_of_iter = 0

    while go :
        count_of_iter += 1
        old_x = new_x
        old_l = new_l
        # –Ω–æ—Ä–º–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        if count_of_iter % time_to_time_period == 0 :
            norm_x = norm_vector(old_x)
            old_x = np.divide(old_x, norm_x)
            #
            if e1 is not None and g1 is not None :
                old_x -= (np.dot(old_x, g1) / np.dot(e1, g1)) * e1

        if l0 == None :
            new_x = A @ old_x
        else :
            new_x = gauss(A, old_x)
        new_l = np.dot(new_x, old_x) / np.dot(old_x, old_x)
        have_answr = abs(old_l - new_l) < e

        go = count_of_iter < ITER_MAX_COUNT and not have_answr
    return new_x, count_of_iter, new_l

def str_help_funk(l, x,*_, r = None, count_iter = None) :
    text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π = {count_iter}\n" if count_iter != None else ""
    text += f"–ù–µ–≤—è–∑–∫–∞ = {r}\n" if r is not None else ""
    text += f"–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ = {l}\n"
    text += f"–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä = {x}\n"
    return text

# –Ω–∞–∏–±–æ–ª—å—à–µ–µ –ø–æ –º–æ–¥—É–ª—é –ª—è–º—é–¥–∞
def highest_abs_l(x0, A, e) :
    text = "–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –ø–æ –º–æ–¥—É–ª—é –ª—è–º–±–¥–∞. \n"
    x, iter_count, l = find_l_multi(x0, A, e)
    x /= norm_vector(x)

    need_repeat = False
    r = None
    if iter_count >= ITER_MAX_COUNT :
        need_repeat = True
        text += "–û—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ.\n\n"
    else :
        # 
        norm_x = norm_vector(x)
        e1 = np.divide(x, norm_x)
        # –ø—Ä–æ–≤–µ—Ä—è–º –Ω–µ–≤—è–∑–∫—É
        r = residual(A, l, e1)
        if norm_vector(r) > e:
            need_repeat = True
            text += f"–ù–æ—Ä–º–∞ –Ω–µ–≤—è–∑–∫–∏ –≤—ã—Å–æ–∫–∞ = {norm_vector(r)} > {e}\n\n"
    
    if need_repeat :
        C = 6
        text += f"–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–ª—è B = A + {C}E\n"
        B_plus = A + C * np.identity(len(A))
        x_b_plus, count_iter_b_p, l_b_p  = find_l_multi(x, B_plus, e)
        l_b_p -= C
        x_b_plus /= norm_vector(x_b_plus)
        r_b_p = residual(A, l_b_p, x_b_plus)

        text += str_help_funk(l_b_p, x_b_plus, count_iter=count_iter_b_p, r=r_b_p)
        text += '\n'

        text += f"–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–ª—è B = A - {C}E\n"
        B_minus  = A - C * np.identity(len(A))
        x_b_minus, count_iter_b_m, l_b_m = find_l_multi(x, B_minus, e)
        l_b_m += C
        x_b_minus /= norm_vector(x_b_minus)
        r_b_m = residual(A, l_b_m, x_b_minus)

        text += str_help_funk(l_b_m, x_b_minus, count_iter=count_iter_b_m, r=r_b_m)
        text += "\n"
    else :
        text += str_help_funk(l, x, count_iter=iter_count, r=r)

    return text

# –≤—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –ø–æ –º–æ–¥—É–ª—é –ª—è–º–±–¥–∞
def second_highest_l(x0, A, e) :
    text = "–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –ø–æ –º–æ–¥—É–ª—é –ª—è–º–±–¥–∞. \n"
    e1, *_ = find_l_multi(x0, A, e)
    A_transpon = np.transpose(A)
    g1, *_ = find_l_multi(x0, A_transpon, e)
    x, count_iter, l = find_l_multi(x0, A, e, g1=g1, e1=e1)

    r = residual(A, l, x)    
    text += str_help_funk(l, x, count_iter=count_iter, r=r)
    text += "\n"
    return text
    
# –±–ª–∏–∂–∞–π—à–µ–µ –∫ l0
def nearest_l (x0, A, e, l0) :
    text = f"–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ª—è–º–±–¥–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ {l0}. \n"
    x, count_iter, near_l = find_l_multi(x0, A, e, l0=l0)
    near_l = l0 + 1 / near_l
    
    r = residual(A, near_l, x)
    text += str_help_funk(near_l, x, count_iter=count_iter, r=r)
    text += '\n'
    return text

def main() :
    matrix, e, l0, v0 = inp_data("input4.txt")
    A = np.array(matrix)
    start_vector = np.array(v0)
    text = "–ú–∞—Ç—Ä–∏—Ü–∞: \n"
    text += str(A) + '\n'
    text += "–ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä —Ö : " + str(start_vector) + '\n'
    text += "l_0 : " + str(l0) + "\n"
    text += "–¢–æ—á–Ω–æ—Å—Ç—å : " + str(e) + "\n\n"
    
    print(text)
    with open("output4.txt", "w", encoding="UTF-8") as file :
        file.write(text)

    menu = "–ß–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª.\n"
    menu += "1. –ü–µ—Ä–≤–æ–µ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –ø–æ –º–æ–¥—É–ª—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ.\n" 
    menu += "2. –í—Ç–æ—Ä–æ–µ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –ø–æ –º–æ–¥—É–ª—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ.\n"
    menu += f"3. –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —á—Å–∏–ª–æ –±–ª–∏–∑–∫–æ–µ –∫ {l0}. \n"
    menu += "0. –í—ã—Ö–æ–¥.\n"
    while True :
        print(menu)
        result = ""
        key = input().split('\n')[0]
        key = int(key) if key.isdigit() else -1
        if key == 0 :
            break
        elif key == 1 :
            result = highest_abs_l(start_vector, A, e)
        elif key == 2 :
            result = second_highest_l(start_vector, A, e)
        elif key == 3 :
            result = nearest_l(start_vector, A, e, l0)
        
        print(result)
        with open("output4.txt", "a", encoding="UTF-8") as file :
            file.write(result)

if __name__ == "__main__":
    main()